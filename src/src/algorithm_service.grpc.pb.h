// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: src/algorithm_service.proto
#ifndef GRPC_src_2falgorithm_5fservice_2eproto__INCLUDED
#define GRPC_src_2falgorithm_5fservice_2eproto__INCLUDED

#include "src/algorithm_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace algorithm {

class AlgorithmService final {
 public:
  static constexpr char const* service_full_name() {
    return "algorithm.AlgorithmService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>> AsyncDbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>>(AsyncDbScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>> PrepareAsyncDbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>>(PrepareAsyncDbScanRaw(context, request, cq));
    }
    virtual ::grpc::Status convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>> AsyncconvexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>>(AsyncconvexHullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>> PrepareAsyncconvexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>>(PrepareAsyncconvexHullRaw(context, request, cq));
    }
    virtual ::grpc::Status PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>> AsyncPointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>>(AsyncPointInPolygonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>> PrepareAsyncPointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>>(PrepareAsyncPointInPolygonRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>* AsyncDbScanRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>* PrepareAsyncDbScanRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>* AsyncconvexHullRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>* PrepareAsyncconvexHullRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>* AsyncPointInPolygonRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::AlgorithmResponse>* PrepareAsyncPointInPolygonRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>> AsyncDbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>>(AsyncDbScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>> PrepareAsyncDbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>>(PrepareAsyncDbScanRaw(context, request, cq));
    }
    ::grpc::Status convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>> AsyncconvexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>>(AsyncconvexHullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>> PrepareAsyncconvexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>>(PrepareAsyncconvexHullRaw(context, request, cq));
    }
    ::grpc::Status PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>> AsyncPointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>>(AsyncPointInPolygonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>> PrepareAsyncPointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>>(PrepareAsyncPointInPolygonRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)>) override;
      void DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)>) override;
      void convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)>) override;
      void PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AsyncDbScanRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* PrepareAsyncDbScanRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AsyncconvexHullRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* PrepareAsyncconvexHullRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AsyncPointInPolygonRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* PrepareAsyncPointInPolygonRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DbScan_;
    const ::grpc::internal::RpcMethod rpcmethod_convexHull_;
    const ::grpc::internal::RpcMethod rpcmethod_PointInPolygon_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DbScan(::grpc::ServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response);
    virtual ::grpc::Status convexHull(::grpc::ServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response);
    virtual ::grpc::Status PointInPolygon(::grpc::ServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DbScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DbScan() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DbScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbScan(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbScan(::grpc::ServerContext* context, ::algorithm::AlgorithmRequest* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::AlgorithmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_convexHull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_convexHull() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_convexHull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convexHull(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestconvexHull(::grpc::ServerContext* context, ::algorithm::AlgorithmRequest* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::AlgorithmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PointInPolygon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PointInPolygon() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PointInPolygon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PointInPolygon(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPointInPolygon(::grpc::ServerContext* context, ::algorithm::AlgorithmRequest* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::AlgorithmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DbScan<WithAsyncMethod_convexHull<WithAsyncMethod_PointInPolygon<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DbScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DbScan() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response) { return this->DbScan(context, request, response); }));}
    void SetMessageAllocatorFor_DbScan(
        ::grpc::MessageAllocator< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DbScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbScan(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbScan(
      ::grpc::CallbackServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_convexHull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_convexHull() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response) { return this->convexHull(context, request, response); }));}
    void SetMessageAllocatorFor_convexHull(
        ::grpc::MessageAllocator< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_convexHull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convexHull(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* convexHull(
      ::grpc::CallbackServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PointInPolygon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PointInPolygon() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response) { return this->PointInPolygon(context, request, response); }));}
    void SetMessageAllocatorFor_PointInPolygon(
        ::grpc::MessageAllocator< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PointInPolygon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PointInPolygon(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PointInPolygon(
      ::grpc::CallbackServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DbScan<WithCallbackMethod_convexHull<WithCallbackMethod_PointInPolygon<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DbScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DbScan() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DbScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbScan(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_convexHull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_convexHull() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_convexHull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convexHull(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PointInPolygon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PointInPolygon() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PointInPolygon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PointInPolygon(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DbScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DbScan() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DbScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbScan(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbScan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_convexHull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_convexHull() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_convexHull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convexHull(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestconvexHull(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PointInPolygon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PointInPolygon() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PointInPolygon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PointInPolygon(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPointInPolygon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DbScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DbScan() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DbScan(context, request, response); }));
    }
    ~WithRawCallbackMethod_DbScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbScan(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbScan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_convexHull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_convexHull() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->convexHull(context, request, response); }));
    }
    ~WithRawCallbackMethod_convexHull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convexHull(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* convexHull(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PointInPolygon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PointInPolygon() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PointInPolygon(context, request, response); }));
    }
    ~WithRawCallbackMethod_PointInPolygon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PointInPolygon(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PointInPolygon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DbScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DbScan() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>* streamer) {
                       return this->StreamedDbScan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DbScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DbScan(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDbScan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::AlgorithmRequest,::algorithm::AlgorithmResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_convexHull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_convexHull() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>* streamer) {
                       return this->StreamedconvexHull(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_convexHull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status convexHull(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedconvexHull(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::AlgorithmRequest,::algorithm::AlgorithmResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PointInPolygon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PointInPolygon() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse>* streamer) {
                       return this->StreamedPointInPolygon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PointInPolygon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PointInPolygon(::grpc::ServerContext* /*context*/, const ::algorithm::AlgorithmRequest* /*request*/, ::algorithm::AlgorithmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPointInPolygon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::AlgorithmRequest,::algorithm::AlgorithmResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DbScan<WithStreamedUnaryMethod_convexHull<WithStreamedUnaryMethod_PointInPolygon<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DbScan<WithStreamedUnaryMethod_convexHull<WithStreamedUnaryMethod_PointInPolygon<Service > > > StreamedService;
};

}  // namespace algorithm


#endif  // GRPC_src_2falgorithm_5fservice_2eproto__INCLUDED
