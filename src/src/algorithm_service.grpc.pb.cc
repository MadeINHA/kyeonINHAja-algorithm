// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: src/algorithm_service.proto

#include "src/algorithm_service.pb.h"
#include "src/algorithm_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace algorithm {

static const char* AlgorithmService_method_names[] = {
  "/algorithm.AlgorithmService/DbScan",
  "/algorithm.AlgorithmService/convexHull",
  "/algorithm.AlgorithmService/PointInPolygon",
};

std::unique_ptr< AlgorithmService::Stub> AlgorithmService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AlgorithmService::Stub> stub(new AlgorithmService::Stub(channel, options));
  return stub;
}

AlgorithmService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DbScan_(AlgorithmService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_convexHull_(AlgorithmService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PointInPolygon_(AlgorithmService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AlgorithmService::Stub::DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DbScan_, context, request, response);
}

void AlgorithmService::Stub::async::DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DbScan_, context, request, response, std::move(f));
}

void AlgorithmService::Stub::async::DbScan(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DbScan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AlgorithmService::Stub::PrepareAsyncDbScanRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::algorithm::AlgorithmResponse, ::algorithm::AlgorithmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DbScan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AlgorithmService::Stub::AsyncDbScanRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDbScanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlgorithmService::Stub::convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convexHull_, context, request, response);
}

void AlgorithmService::Stub::async::convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convexHull_, context, request, response, std::move(f));
}

void AlgorithmService::Stub::async::convexHull(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convexHull_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AlgorithmService::Stub::PrepareAsyncconvexHullRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::algorithm::AlgorithmResponse, ::algorithm::AlgorithmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convexHull_, context, request);
}

::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AlgorithmService::Stub::AsyncconvexHullRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvexHullRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlgorithmService::Stub::PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::algorithm::AlgorithmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PointInPolygon_, context, request, response);
}

void AlgorithmService::Stub::async::PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PointInPolygon_, context, request, response, std::move(f));
}

void AlgorithmService::Stub::async::PointInPolygon(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PointInPolygon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AlgorithmService::Stub::PrepareAsyncPointInPolygonRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::algorithm::AlgorithmResponse, ::algorithm::AlgorithmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PointInPolygon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::algorithm::AlgorithmResponse>* AlgorithmService::Stub::AsyncPointInPolygonRaw(::grpc::ClientContext* context, const ::algorithm::AlgorithmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPointInPolygonRaw(context, request, cq);
  result->StartCall();
  return result;
}

AlgorithmService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlgorithmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::algorithm::AlgorithmRequest* req,
             ::algorithm::AlgorithmResponse* resp) {
               return service->DbScan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlgorithmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::algorithm::AlgorithmRequest* req,
             ::algorithm::AlgorithmResponse* resp) {
               return service->convexHull(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::AlgorithmRequest, ::algorithm::AlgorithmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlgorithmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::algorithm::AlgorithmRequest* req,
             ::algorithm::AlgorithmResponse* resp) {
               return service->PointInPolygon(ctx, req, resp);
             }, this)));
}

AlgorithmService::Service::~Service() {
}

::grpc::Status AlgorithmService::Service::DbScan(::grpc::ServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::convexHull(::grpc::ServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::PointInPolygon(::grpc::ServerContext* context, const ::algorithm::AlgorithmRequest* request, ::algorithm::AlgorithmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace algorithm

